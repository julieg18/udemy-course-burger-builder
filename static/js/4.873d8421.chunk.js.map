{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","Auth","errorMessage","uppercase","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","C_Users_jujug_workspace_Personal_Projects_react_projects_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","isSignup","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","error","message","split","toLowerCase","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","classes","btnType","clicked","React","Component","connect","_state$auth","auth","idToken","burgerBuilder","building","dispatch","setAuthRedirectPath"],"mappings":"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","file":"static/js/4.873d8421.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => {\r\n            return (\r\n              <option key={option.value} value={option.value}>\r\n                {option.displayValue}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__VVfxU\",\"Label\":\"Input_Label__3U7mq\",\"InputElement\":\"Input_InputElement__3XcFf\",\"Invalid\":\"Input_Invalid__3BiEs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2ouAv\",\"errorMessage\":\"Auth_errorMessage__fK-W7\",\"uppercase\":\"Auth_uppercase__28STN\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport styles from './Auth.module.css';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\nimport { auth, setAuthRedirectPath } from '../../store/actions/index';\r\n\r\nclass Auth extends React.Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'time01@gmail.com',\r\n        },\r\n        label: 'Your Email:',\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: '**********',\r\n        },\r\n        label: 'Your Password:',\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation,\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup,\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        label={formElement.config.label}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = (\r\n        <p className={styles.errorMessage}>\r\n          {this.props.error.message\r\n            .split('_')\r\n            .join(' ')\r\n            .toLowerCase()}\r\n        </p>\r\n      );\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <h1>{this.state.isSignup ? 'Sign Up' : 'Login'}</h1>\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button classes={styles.uppercase} btnType=\"Success\">\r\n            Submit\r\n          </Button>\r\n        </form>\r\n        <Button\r\n          classes={styles.uppercase}\r\n          btnType=\"Danger\"\r\n          clicked={this.switchAuthModeHandler}\r\n        >\r\n          Switch To {this.state.isSignup ? 'Login' : 'Sign Up'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { error, loading, idToken, authRedirectPath } = state.auth;\r\n  return {\r\n    loading,\r\n    error,\r\n    isAuthenticated: idToken !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(setAuthRedirectPath('/')),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Auth);\r\n"],"sourceRoot":""}